out
}
SD.E1 <- get.mean.RT(data.E1)
SD.E1 <- data.frame(SD.E1)
SD.E1
load("data/after_sampling/E1PP.RData")
# sim <- do.call(rbind, E1PP)
data.E1 <- lapply(E1PP, function(x) attr(x, "data"))
data.E1 <- do.call(rbind, data.E1)
SD.E1 <- get.sd.RT(data.E1)
SD.E1 <- data.frame(SD.E1)
SD.E1
cbind(RT.E1,SD.E1)
data.E1
str(data.E1)
ddply(data.E1, ~cond, summarise, M=mean(RT,na.rm=T))
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*cond, summarise, M=mean(RT,na.rm=T))
ddply(data.E1, ~S*cond, summarise, M=mean(RT))
ddply(data.E1, ~S*cond*R, summarise, M=mean(RT))
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*R*cond, summarise, M=mean(RT))
ddply(data.E1, ~S*R*block, summarise, M=mean(RT))
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*R*cond, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*block, summarise, M=mean(RT), SD=sd(RT))
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*R, summarise, M=mean(RT), SD=sd(RT))
cbind(RT.E1,SD.E1)
rm(list=ls())
# setwd("~/russ_model_analyses")
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
source("dmc/dmc.R")
load_model ("LBA","lbaN_B.R")
source("LSAnova.R")
require(gridExtra)
require("lme4")
require(car)
require(plyr)
require(dplyr)
require("pander")
# load("~/Modelling/x1/samples/okdats.E1.RData")  # Original data
load("C:/Users/Russell Boag/Documents/GitHub/DMCATC/samples/E1.block.B.V_cond.B.V.PMV.samples.RData")  # Samples object
samples.E1 <- E1.block.B.V_cond.B.V.PMV.samples
rm(E1.block.B.V_cond.B.V.PMV.samples)
load("C:/Users/Russell Boag/Documents/GitHub/DMCATC/data/samples/E1.block.B.V_cond.B.V.PMV.samples.RData")  # Samples object
samples.E1 <- E1.block.B.V_cond.B.V.PMV.samples
rm(E1.block.B.V_cond.B.V.PMV.samples)
#
get.hdata.dmc <- function(hsamples){
list.wind<-lapply(seq_along(hsamples), function(samples, n, i) cbind(n[[i]], samples[[i]]$data),
samples= hsamples, n = names(hsamples))
out<-do.call(rbind, list.wind)
names(out)[1] <- "s"
out
}
#
data.E1 <- get.hdata.dmc(samples.E1)  # Get data from samples object
head(data.E1)
# save(data.E1, file="data.E1.RData")
# all.equal(datE1[order(datE1$s),], data2)  # Check recovered data matches original data
head(data.E1)
data.E1$C <- rep(0,length(data.E1$RT))
for(i in 1:length(data.E1$RT)){
if(data.E1$S[i]=="cc" & data.E1$R[i]=="C"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="nn" & data.E1$R[i]=="N"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pc" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pn" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
}
}
#
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC/analysis")
cdt <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]  # Conflict detection task only (no PM)
cdt$S <- factor(as.character(cdt$S)); cdt$R <- factor(as.character(cdt$R))
str(cdt)
cdt
pm <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]  # PM trials only
pm$S <- factor(as.character(pm$S)); pm$block <- factor(as.character(pm$block))
str(pm)
head(pm)
CDT <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]  # Conflict detection task only (no PM)
CDT$S <- factor(as.character(CDT$S)); CDT$R <- factor(as.character(CDT$R))
str(CDT)
head(CDT)
PMT <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]  # PM trials only
PMT$S <- factor(as.character(PMT$S)); PMT$block <- factor(as.character(PMT$block))
str(PMT)
head(PMT)
#
PMT.glmer.E1 <- glmer(C ~ S*cond+(1|s), data=PMT, family=binomial(link="probit"))
save(PMT.glmer.E1, file="PMT.glmer.E1.RData")
load("PMT.glmer.E1.RData")
PMT.glm.E1 <- Anova(PMT.glmer.E1,type="II")
PMT.glm.E1
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT <- ddply(PMT, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.PMT.S <- ddply(RP.PMT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT.TP <- ddply(RP.PMT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.S
RP.CDT.Block
RP.CDT.TP
load("data/after_sampling/E1PP.RData")
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
load("data/after_sampling/E1PP.RData")
get.accuracy <- function (data) {
acc.C <- NA; acc.N <- NA
acc.P <- NA
acc.C.control <- NA;acc.C.pm <- NA;
acc.N.control <- NA;acc.N.pm <- NA;
acc.C.A <- NA;acc.C.B <- NA;acc.C.C <- NA;acc.C.D <- NA;
acc.N.A <- NA;acc.N.B <- NA;acc.N.C <- NA;acc.N.D <- NA;
acc.P.A <- NA;acc.P.B <- NA;acc.P.C <- NA;acc.P.D <- NA;
acc.C <- length(data$RT[data$S=="cc" & data$R=="C"])/
length(data$RT[data$S=="cc"])
acc.N <- length(data$RT[data$S=="nn" & data$R=="N"])/
length(data$RT[data$S=="nn"])
acc.P <- length(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P"])/
length(data$RT[(data$S=="pc"|data$S=="pn")])
acc.C.control <- length(data$RT[data$S=="cc" & data$R=="C" & data$block=="2"])/
length(data$RT[data$S=="cc" & data$block=="2"])
acc.C.pm <- length(data$RT[data$S=="cc" & data$R=="C" & data$block=="3"])/
length(data$RT[data$S=="cc" & data$block=="3"])
acc.N.control <- length(data$RT[data$S=="nn" & data$R=="N" & data$block=="2"])/
length(data$RT[data$S=="nn" & data$block=="2"])
acc.N.pm <- length(data$RT[data$S=="nn" & data$R=="N" & data$block=="3"])/
length(data$RT[data$S=="nn" & data$block=="3"])
acc.C.A <- length(data$RT[data$S=="cc" & data$R=="C" & data$cond=="A"])/
length(data$RT[data$S=="cc" & data$cond=="A"])
acc.C.B <- length(data$RT[data$S=="cc" & data$R=="C" & data$cond=="B"])/
length(data$RT[data$S=="cc" & data$cond=="B"])
acc.C.C <- length(data$RT[data$S=="cc" & data$R=="C" & data$cond=="C"])/
length(data$RT[data$S=="cc" & data$cond=="C"])
acc.C.D <- length(data$RT[data$S=="cc" & data$R=="C" & data$cond=="D"])/
length(data$RT[data$S=="cc" & data$cond=="D"])
acc.N.A <- length(data$RT[data$S=="nn" & data$R=="N" & data$cond=="A"])/
length(data$RT[data$S=="nn" & data$cond=="A"])
acc.N.B <- length(data$RT[data$S=="nn" & data$R=="N" & data$cond=="B"])/
length(data$RT[data$S=="nn" & data$cond=="B"])
acc.N.C <- length(data$RT[data$S=="nn" & data$R=="N" & data$cond=="C"])/
length(data$RT[data$S=="nn" & data$cond=="C"])
acc.N.D <- length(data$RT[data$S=="nn" & data$R=="N" & data$cond=="D"])/
length(data$RT[data$S=="nn" & data$cond=="D"])
acc.P.A <- length(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="A"])/
length(data$RT[(data$S=="pc"|data$S=="pn") & data$cond=="A"])
acc.P.B <- length(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="B"])/
length(data$RT[(data$S=="pc"|data$S=="pn") & data$cond=="B"])
acc.P.C <- length(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="C"])/
length(data$RT[(data$S=="pc"|data$S=="pn") & data$cond=="C"])
acc.P.D <- length(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="D"])/
length(data$RT[(data$S=="pc"|data$S=="pn") & data$cond=="D"])
out <- c(acc.C, acc.N,
acc.P,
acc.C.control,acc.C.pm,
acc.N.control,acc.N.pm,
acc.C.A,acc.C.B,acc.C.C,acc.C.D,
acc.N.A,acc.N.B,acc.N.C,acc.N.D,
acc.P.A,acc.P.B,acc.P.C,acc.P.D
)
names(out) <- c("Conflict","Nonconflict",
"PM",
"Conflict Control","Conflict PM",
"Nonconflict Control","Nonconflict PM",
"Conflict A","Conflict B","Conflict C","Conflict D",
"Nonconflict A","Nonconflict B","Nonconflict C","Nonconflict D",
"PM A","PM B","PM C","PM D"
)
out
}
get.mean.RT <- function (data) {
RT.C <- NA; RT.N <- NA
RT.P <- NA
RT.C.control <- NA;RT.C.pm <- NA;
RT.N.control <- NA;RT.N.pm <- NA;
RT.C.A <- NA;RT.C.B <- NA;RT.C.C <- NA;RT.C.D <- NA;
RT.N.A <- NA;RT.N.B <- NA;RT.N.C <- NA;RT.N.D <- NA;
RT.P.A <- NA;RT.P.B <- NA;RT.P.C <- NA;RT.P.D <- NA;
RT.C <- mean(data$RT[data$S=="cc" & data$R=="C"])
RT.N <- mean(data$RT[data$S=="nn" & data$R=="N"])
RT.P <- mean(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P"])
RT.C.control <- mean(data$RT[data$S=="cc" & data$R=="C" & data$block=="2"])
RT.C.pm <- mean(data$RT[data$S=="cc" & data$R=="C" & data$block=="3"])
RT.N.control <- mean(data$RT[data$S=="cc" & data$R=="N" & data$block=="2"])
RT.N.pm <- mean(data$RT[data$S=="cc" & data$R=="N" & data$block=="3"])
RT.C.A <- mean(data$RT[data$S=="cc" & data$R=="C" & data$cond=="A"])
RT.C.B <- mean(data$RT[data$S=="cc" & data$R=="C" & data$cond=="B"])
RT.C.C <- mean(data$RT[data$S=="cc" & data$R=="C" & data$cond=="C"])
RT.C.D <- mean(data$RT[data$S=="cc" & data$R=="C" & data$cond=="D"])
RT.N.A <- mean(data$RT[data$S=="nn" & data$R=="N" & data$cond=="A"])
RT.N.B <- mean(data$RT[data$S=="nn" & data$R=="N" & data$cond=="B"])
RT.N.C <- mean(data$RT[data$S=="nn" & data$R=="N" & data$cond=="C"])
RT.N.D <- mean(data$RT[data$S=="nn" & data$R=="N" & data$cond=="D"])
RT.P.A <- mean(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="A"])
RT.P.B <- mean(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="B"])
RT.P.C <- mean(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="C"])
RT.P.D <- mean(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="D"])
out <- c(RT.C,RT.N,
RT.P,
RT.C.control,RT.C.pm,
RT.N.control,RT.N.pm,
RT.C.A,RT.C.B,RT.C.C,RT.C.D,
RT.N.A,RT.N.B,RT.N.C,RT.N.D,
RT.P.A,RT.P.B,RT.P.C,RT.P.D
)
names(out) <- c("Conflict","Nonconflict",
"PM",
"Conflict Control","Conflict PM",
"Nonconflict Control","Nonconflict PM",
"Conflict A","Conflict B","Conflict C","Conflict D",
"Nonconflict A","Nonconflict B","Nonconflict C","Nonconflict D",
"PM A","PM B","PM C","PM D"
)
out
}
get.sd.RT <- function (data) {
RT.C <- NA; RT.N <- NA
RT.P <- NA
RT.C.control <- NA;RT.C.pm <- NA;
RT.N.control <- NA;RT.N.pm <- NA;
RT.C.A <- NA;RT.C.B <- NA;RT.C.C <- NA;RT.C.D <- NA;
RT.N.A <- NA;RT.N.B <- NA;RT.N.C <- NA;RT.N.D <- NA;
RT.P.A <- NA;RT.P.B <- NA;RT.P.C <- NA;RT.P.D <- NA;
RT.C <- sd(data$RT[data$S=="cc" & data$R=="C"])
RT.N <- sd(data$RT[data$S=="nn" & data$R=="N"])
RT.P <- sd(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P"])
RT.C.control <- sd(data$RT[data$S=="cc" & data$R=="C" & data$block=="2"])
RT.C.pm <- sd(data$RT[data$S=="cc" & data$R=="C" & data$block=="3"])
RT.N.control <- sd(data$RT[data$S=="cc" & data$R=="N" & data$block=="2"])
RT.N.pm <- sd(data$RT[data$S=="cc" & data$R=="N" & data$block=="3"])
RT.C.A <- sd(data$RT[data$S=="cc" & data$R=="C" & data$cond=="A"])
RT.C.B <- sd(data$RT[data$S=="cc" & data$R=="C" & data$cond=="B"])
RT.C.C <- sd(data$RT[data$S=="cc" & data$R=="C" & data$cond=="C"])
RT.C.D <- sd(data$RT[data$S=="cc" & data$R=="C" & data$cond=="D"])
RT.N.A <- sd(data$RT[data$S=="nn" & data$R=="N" & data$cond=="A"])
RT.N.B <- sd(data$RT[data$S=="nn" & data$R=="N" & data$cond=="B"])
RT.N.C <- sd(data$RT[data$S=="nn" & data$R=="N" & data$cond=="C"])
RT.N.D <- sd(data$RT[data$S=="nn" & data$R=="N" & data$cond=="D"])
RT.P.A <- sd(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="A"])
RT.P.B <- sd(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="B"])
RT.P.C <- sd(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="C"])
RT.P.D <- sd(data$RT[(data$S=="pc"|data$S=="pn") & data$R=="P" & data$cond=="D"])
out <- c(RT.C,RT.N,
RT.P,
RT.C.control,RT.C.pm,
RT.N.control,RT.N.pm,
RT.C.A,RT.C.B,RT.C.C,RT.C.D,
RT.N.A,RT.N.B,RT.N.C,RT.N.D,
RT.P.A,RT.P.B,RT.P.C,RT.P.D
)
names(out) <- c("Conflict","Nonconflict",
"PM",
"Conflict Control","Conflict PM",
"Nonconflict Control","Nonconflict PM",
"Conflict A","Conflict B","Conflict C","Conflict D",
"Nonconflict A","Nonconflict B","Nonconflict C","Nonconflict D",
"PM A","PM B","PM C","PM D"
)
out
}
#
load("data/after_sampling/E1PP.RData")
# sim <- do.call(rbind, E1PP)
data.E1 <- lapply(E1PP, function(x) attr(x, "data"))
data.E1 <- do.call(rbind, data.E1)
Accuracy.E1 <- get.accuracy(data.E1)
Accuracy.E1 <- data.frame(Accuracy.E1)
Accuracy.E1
RT.E1 <- get.mean.RT(data.E1)
RT.E1 <- data.frame(RT.E1)
RT.E1
SD.E1 <- get.sd.RT(data.E1)
SD.E1 <- data.frame(SD.E1)
SD.E1
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*R, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*cond, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*block, summarise, M=mean(RT), SD=sd(RT))
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
source("dmc/dmc.R")
load_model ("LBA","lbaN_B.R")
source("LSAnova.R")
require(gridExtra)
require("lme4")
require(car)
require(plyr)
require(dplyr)
require("pander")
# load("~/Modelling/x1/samples/okdats.E1.RData")  # Original data
load("C:/Users/Russell Boag/Documents/GitHub/DMCATC/data/samples/E1.block.B.V_cond.B.V.PMV.samples.RData")  # Samples object
samples.E1 <- E1.block.B.V_cond.B.V.PMV.samples
rm(E1.block.B.V_cond.B.V.PMV.samples)
# # # Get data from samples object # # #
#
get.hdata.dmc <- function(hsamples){
list.wind<-lapply(seq_along(hsamples), function(samples, n, i) cbind(n[[i]], samples[[i]]$data),
samples= hsamples, n = names(hsamples))
out<-do.call(rbind, list.wind)
names(out)[1] <- "s"
out
}
#
data.E1 <- get.hdata.dmc(samples.E1)  # Get data from samples object
head(data.E1)
# save(data.E1, file="data.E1.RData")
# all.equal(datE1[order(datE1$s),], data2)  # Check recovered data matches original data
# # # Add logical S-R match factor 'C' # # #
#
data.E1$C <- rep(0,length(data.E1$RT))
for(i in 1:length(data.E1$RT)){
if(data.E1$S[i]=="cc" & data.E1$R[i]=="C"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="nn" & data.E1$R[i]=="N"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pc" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pn" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
}
}
#
# # # Prep dataframes for analysis # # #
#
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC/analysis")
# Conflict Detection Task trials only (no PM)
CDT <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]
CDT$S <- factor(as.character(CDT$S)); CDT$R <- factor(as.character(CDT$R))
str(CDT)
head(CDT)
# PM Task trials only
PMT <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]
PMT$S <- factor(as.character(PMT$S)); PMT$block <- factor(as.character(PMT$block))
str(PMT)
head(PMT)
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT <- ddply(PMT, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.PMT.S <- ddply(RP.PMT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT.TP <- ddply(RP.PMT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.S
RP.CDT.Block
RP.CDT.TP
RP.PMT.S
RP.PMT.TP
Accuracy.E1
RP.PMT.TP <- ddply(RP.PMT, ~cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT.TP
RP.CDT.Block
Accuracy.E1
RP.CDT.Block.TP <- ddply(RP.CDT, ~S*block*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.Block.TP
RP.CDT.TP
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.Block.TP <- ddply(RP.CDT, ~S*block*cond, summarise, M=mean(RP), SD=sd(RP))
RP.PMT <- ddply(PMT, ~s*cond*block*S, summarise, RP=mean(C))
RP.PMT.S <- ddply(RP.PMT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.PMT.TP <- ddply(RP.PMT, ~cond, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.S
RP.CDT.Block
RP.CDT.TP
RP.CDT.Block.TP
RP.PMT.S
RP.PMT.TP
Accuracy.E1
length(CDT$RT[data$S=="cc" & CDT$R=="C"])/
length(CDT$RT[data$S=="cc"])
length(CDT$RT[CDT$S=="cc" & CDT$R=="C"])/
length(CDT$RT[CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.S
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.S
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
RP.CDT
mean(RP.CDT$RP[RP.CDT$S=="cc"]
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.Block.TP <- ddply(RP.CDT, ~S*block*cond, summarise, M=mean(RP), SD=sd(RP))
RP.PMT <- ddply(PMT, ~s*cond*block*S, summarise, RP=mean(C))
RP.PMT.S <- ddply(RP.PMT, ~S, summarise, M=mean(RP), SD=sd(RP))
RP.PMT.TP <- ddply(RP.PMT, ~cond, summarise, M=mean(RP), SD=sd(RP))
RP.CDT.S
RP.CDT.Block
RP.CDT.TP
RP.CDT.Block.TP
RP.PMT.S
RP.PMT.TP
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3) +
ylim(0.5,1) + ylab("Accuracy") +
xlab("PM Block") +
ggtitle("Accuracy by PM Block")
#
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
load("data/after_sampling/E1PP.RData")
# sim <- do.call(rbind, E1PP)
data.E1 <- lapply(E1PP, function(x) attr(x, "data"))
data.E1 <- do.call(rbind, data.E1)
Accuracy.E1 <- get.accuracy(data.E1)
Accuracy.E1 <- data.frame(Accuracy.E1)
Accuracy.E1
RT.E1 <- get.mean.RT(data.E1)
RT.E1 <- data.frame(RT.E1)
RT.E1
SD.E1 <- get.sd.RT(data.E1)
SD.E1 <- data.frame(SD.E1)
SD.E1
cbind(RT.E1,SD.E1)
ddply(data.E1, ~S*R, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*cond, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*block, summarise, M=mean(RT), SD=sd(RT))
# Means & SDs for Response Proportions
mRP.E1.Block <- ddply(RP.E1, ~block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
mRP.E1.Block
mRP.E1.TP <- ddply(RP.E1, ~cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
mRP.E1.TP
head(mRP.E1)
str(mRP.E1)
# save(mRP.E1, file="mRP.E1.RData")
# # # Manifests - Mean RT # # #
#
# All responses
mRT.E1 <- ddply(data.E1[ (data.E1$S=="cc" & data.E1$C=="1") | (data.E1$S=="nn" & data.E1$C=="1"), ], ~cond*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~S*cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~S*block, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
# save(mRT.E1, file="mRT.E1.RData")
# CDT Correct Responses Only
ddply(dCDT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
# PM Task Correct Responses Only
ddply(dPM.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
length(CDT$RT[CDT$S=="cc" & CDT$R=="C"])/
length(CDT$RT[CDT$S=="cc"])
mean(RP.CDT$RP[RP.CDT$S=="cc"])
mean(CDT$C[CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
sd(CDT$C[CDT$S=="cc"])
mean(CDT$C[CDT$S=="cc"])
Accuracy.E1
length(CDT$RT[CDT$S=="cc" & CDT$R=="C"])/
length(CDT$RT[CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
mean(RP.CDT$RP[RP.CDT$S=="cc"])
sd(RP.CDT$RP[RP.CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*S, summarise, RP=mean(C))
sd(RP.CDT$RP[RP.CDT$S=="cc"])
mean(RP.CDT$RP[RP.CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*S*block*cond, summarise, RP=mean(C))
mean(RP.CDT$RP[RP.CDT$S=="cc"])
RP.CDT <- ddply(CDT[CDT$S=="cc",], ~s*S*block*cond, summarise, RP=mean(C))
mean(RP.CDT$RP[RP.CDT$S=="cc"])
RP.CDT <- ddply(CDT[CDT$S=="cc",], ~s*cond*block, summarise, RP=mean(C))
mean(RP.CDT$RP[RP.CDT$S=="cc"])
RP.CDT <- ddply(CDT, ~s*cond*block*S, summarise, RP=mean(C))
mean(RP.CDT$RP[RP.CDT$S=="cc"])
Accuracy.E1
mRP.E1.Block <- ddply(RP.E1, ~block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~S*cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
dPMT.RT <- arr2df(tapply(PMT$RT[PMT$C==1],
list(s=PMT$s[PMT$C==1], block=PMT$block[PMT$C==1], cond=PMT$cond[PMT$C==1], S=PMT$S[PMT$C==1]),
mean))
dPMT.RT
str(dPMT.RT)
dCDT.RT <- arr2df(tapply(CDT$RT[CDT$C==1],
list(s=CDT$s[CDT$C==1], block=CDT$block[CDT$C==1], cond=CDT$cond[CDT$C==1], S=CDT$S[CDT$C==1]),
mean))
str(dCDT.RT)
ddply(data.E1, ~S*R, summarise, M=mean(RT), SD=sd(RT))
ddply(dCDT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
ddply(dCDT.RT, ~S*R, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
dCDT.RT
ddply(dCDT.RT, ~S, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
ddply(dCDT.RT, ~S*block, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
ddply(data.E1, ~S*R, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*cond, summarise, M=mean(RT), SD=sd(RT))
ddply(data.E1, ~S*R*block, summarise, M=mean(RT), SD=sd(RT))
ddply(dCDT.RT, ~S*block, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
ddply(dPM.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
ddply(dPMT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
ddply(dPMT.RT, ~S*cond, summarise, M=mean(y, na.rm=TRUE))
dCDT.RT
dPMT.RT <- arr2df(tapply(PMT$RT[PMT$C==1],
list(s=PMT$s[PMT$C==1], block=PMT$block[PMT$C==1], cond=PMT$cond[PMT$C==1], S=PMT$S[PMT$C==1]),
mean))
dPMT.RT
str(dPMT.RT)
dCDT.RT <- arr2df(tapply(CDT$RT[CDT$C==1],
list(s=CDT$s[CDT$C==1], block=CDT$block[CDT$C==1], cond=CDT$cond[CDT$C==1], S=CDT$S[CDT$C==1]),
mean))
str(dCDT.RT)
str(dCDT.RT)
dPMT.RT <- arr2df(tapply(PMT$RT[PMT$C==1],
list(s=PMT$s[PMT$C==1], block=PMT$block[PMT$C==1], cond=PMT$cond[PMT$C==1], S=PMT$S[PMT$C==1]),
mean))
head(dPMT.RT)
str(dPMT.RT)
