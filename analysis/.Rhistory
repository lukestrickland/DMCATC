ProactiveTP.CDC <- function (thetas) (thetas[,"B.C3C",, drop=F] - thetas[,"B.C2C",, drop=F]) -
(thetas[,"B.D3C",, drop=F] - thetas[,"B.D2C",, drop=F])
ProactiveTP.ABN <- function (thetas) (thetas[,"B.A3N",, drop=F] - thetas[,"B.A2N",, drop=F]) -
(thetas[,"B.B3N",, drop=F] - thetas[,"B.B2N",, drop=F])
ProactiveTP.BCN <- function (thetas) (thetas[,"B.B3N",, drop=F] - thetas[,"B.B2N",, drop=F]) -
(thetas[,"B.C3N",, drop=F] - thetas[,"B.C2N",, drop=F])
ProactiveTP.CDN <- function (thetas) (thetas[,"B.C3N",, drop=F] - thetas[,"B.C2N",, drop=F]) -
(thetas[,"B.D3N",, drop=F] - thetas[,"B.D2N",, drop=F])
# # # Effort/Arousal by Time Pressure # # #
#
Effort.TPccCABC <- function (thetas) thetas[,"mean_v.ccA2C",, drop=F] - thetas[,"mean_v.ccB2C",, drop=F]
Effort.TPccCBCC <- function (thetas) thetas[,"mean_v.ccB2C",, drop=F] - thetas[,"mean_v.ccC2C",, drop=F]
Effort.TPccCCDC <- function (thetas) thetas[,"mean_v.ccC2C",, drop=F] - thetas[,"mean_v.ccD2C",, drop=F]
Effort.TPccPMABC <- function (thetas) thetas[,"mean_v.ccA3C",, drop=F] - thetas[,"mean_v.ccB3C",, drop=F]
Effort.TPccPMBCC <- function (thetas) thetas[,"mean_v.ccB3C",, drop=F] - thetas[,"mean_v.ccC3C",, drop=F]
Effort.TPccPMCDC <- function (thetas) thetas[,"mean_v.ccC3C",, drop=F] - thetas[,"mean_v.ccD3C",, drop=F]
Effort.TPnnCABN <- function (thetas) thetas[,"mean_v.nnA2N",, drop=F] - thetas[,"mean_v.nnB2N",, drop=F]
Effort.TPnnCBCN <- function (thetas) thetas[,"mean_v.nnB2N",, drop=F] - thetas[,"mean_v.nnC2N",, drop=F]
Effort.TPnnCCDN <- function (thetas) thetas[,"mean_v.nnC2N",, drop=F] - thetas[,"mean_v.nnD2N",, drop=F]
Effort.TPnnPMABN <- function (thetas) thetas[,"mean_v.nnA3N",, drop=F] - thetas[,"mean_v.nnB3N",, drop=F]
Effort.TPnnPMBCN <- function (thetas) thetas[,"mean_v.nnB3N",, drop=F] - thetas[,"mean_v.nnC3N",, drop=F]
Effort.TPnnPMCDN <- function (thetas) thetas[,"mean_v.nnC3N",, drop=F] - thetas[,"mean_v.nnD3N",, drop=F]
#
Effort.TPnnCABC <- function (thetas) thetas[,"mean_v.nnA2C",, drop=F] - thetas[,"mean_v.nnB2C",, drop=F]
Effort.TPnnCBCC <- function (thetas) thetas[,"mean_v.nnB2C",, drop=F] - thetas[,"mean_v.nnC2C",, drop=F]
Effort.TPnnCCDC <- function (thetas) thetas[,"mean_v.nnC2C",, drop=F] - thetas[,"mean_v.nnD2C",, drop=F]
Effort.TPnnPMABC <- function (thetas) thetas[,"mean_v.nnA3C",, drop=F] - thetas[,"mean_v.nnB3C",, drop=F]
Effort.TPnnPMBCC <- function (thetas) thetas[,"mean_v.nnB3C",, drop=F] - thetas[,"mean_v.nnC3C",, drop=F]
Effort.TPnnPMCDC <- function (thetas) thetas[,"mean_v.nnC3C",, drop=F] - thetas[,"mean_v.nnD3C",, drop=F]
Effort.TPccCABN <- function (thetas) thetas[,"mean_v.ccA2N",, drop=F] - thetas[,"mean_v.ccB2N",, drop=F]
Effort.TPccCBCN <- function (thetas) thetas[,"mean_v.ccB2N",, drop=F] - thetas[,"mean_v.ccC2N",, drop=F]
Effort.TPccCCDN <- function (thetas) thetas[,"mean_v.ccC2N",, drop=F] - thetas[,"mean_v.ccD2N",, drop=F]
Effort.TPccPMABN <- function (thetas) thetas[,"mean_v.ccA3N",, drop=F] - thetas[,"mean_v.ccB3N",, drop=F]
Effort.TPccPMBCN <- function (thetas) thetas[,"mean_v.ccB3N",, drop=F] - thetas[,"mean_v.ccC3N",, drop=F]
Effort.TPccPMCDN <- function (thetas) thetas[,"mean_v.ccC3N",, drop=F] - thetas[,"mean_v.ccD3N",, drop=F]
#
Effort.TPppPMABP <- function (thetas) thetas[,"mean_v.ppA3P",, drop=F] - thetas[,"mean_v.ppB3P",, drop=F]
Effort.TPppPMBCP <- function (thetas) thetas[,"mean_v.ppB3P",, drop=F] - thetas[,"mean_v.ppC3P",, drop=F]
Effort.TPppPMCDP <- function (thetas) thetas[,"mean_v.ppC3P",, drop=F] - thetas[,"mean_v.ppD3P",, drop=F]
Effort.TPpcPMABC <- function (thetas) thetas[,"mean_v.pcA3C",, drop=F] - thetas[,"mean_v.pcB3C",, drop=F]
Effort.TPpcPMBCC <- function (thetas) thetas[,"mean_v.pcB3C",, drop=F] - thetas[,"mean_v.pcC3C",, drop=F]
Effort.TPpcPMCDC <- function (thetas) thetas[,"mean_v.pcC3C",, drop=F] - thetas[,"mean_v.pcD3C",, drop=F]
Effort.TPpnPMABN <- function (thetas) thetas[,"mean_v.pnA3N",, drop=F] - thetas[,"mean_v.pnB3N",, drop=F]
Effort.TPpnPMBCN <- function (thetas) thetas[,"mean_v.pnB3N",, drop=F] - thetas[,"mean_v.pnC3N",, drop=F]
Effort.TPpnPMCDN <- function (thetas) thetas[,"mean_v.pnC3N",, drop=F] - thetas[,"mean_v.pnD3N",, drop=F]
Effort.TPpnPMABC <- function (thetas) thetas[,"mean_v.pnA3C",, drop=F] - thetas[,"mean_v.pnB3C",, drop=F]
Effort.TPpnPMBCC <- function (thetas) thetas[,"mean_v.pnB3C",, drop=F] - thetas[,"mean_v.pnC3C",, drop=F]
Effort.TPpnPMCDC <- function (thetas) thetas[,"mean_v.pnC3C",, drop=F] - thetas[,"mean_v.pnD3C",, drop=F]
Effort.TPpcPMABN <- function (thetas) thetas[,"mean_v.pcA3N",, drop=F] - thetas[,"mean_v.pcB3N",, drop=F]
Effort.TPpcPMBCN <- function (thetas) thetas[,"mean_v.pcB3N",, drop=F] - thetas[,"mean_v.pcC3N",, drop=F]
Effort.TPpcPMCDN <- function (thetas) thetas[,"mean_v.pcC3N",, drop=F] - thetas[,"mean_v.pcD3N",, drop=F]
# # # Z-score and P-value Tables # # #
#
Reactive.Table <- data.frame(rbind(
A.NonPM.minus.PM=c(zandp(samples.A4, Reactive.ccAC),
zandp(samples.A4, Reactive.nnAN),
zandp(samples.A4, Reactive.nnAC),
zandp(samples.A4, Reactive.ccAN)
),
B.NonPM.minus.PM=c(zandp(samples.A4, Reactive.ccBC),
zandp(samples.A4, Reactive.nnBN),
zandp(samples.A4, Reactive.nnBC),
zandp(samples.A4, Reactive.ccBN)
),
C.NonPM.minus.PM=c(zandp(samples.A4, Reactive.ccCC),
zandp(samples.A4, Reactive.nnCN),
zandp(samples.A4, Reactive.nnCC),
zandp(samples.A4, Reactive.ccCN)
),
D.NonPM.minus.PM=c(zandp(samples.A4, Reactive.ccDC),
zandp(samples.A4, Reactive.nnDN),
zandp(samples.A4, Reactive.nnDC),
zandp(samples.A4, Reactive.ccDN)
)
))
colnames(Reactive.Table) <- c("Conflict","Nonconflict","Conflict (FA)","Nonconflict (FA)")
# Reactive.Table
#
Proactive.Table <- data.frame(rbind(
A.PM.minus.Control=c(zandp(samples.A4, Proactive.AC),
zandp(samples.A4, Proactive.AN)
),
B.PM.minus.Control=c(zandp(samples.A4, Proactive.BC),
zandp(samples.A4, Proactive.BN)
),
C.PM.minus.Control=c(zandp(samples.A4, Proactive.CC),
zandp(samples.A4, Proactive.CN)
),
D.PM.minus.Control=c(zandp(samples.A4, Proactive.DC),
zandp(samples.A4, Proactive.DN)
)
))
colnames(Proactive.Table) <- c("Conflict","Nonconflict")
# Proactive.Table
#
Capacity.Table <- data.frame(rbind(
A.PM.minus.Control=c(zandp(samples.A4, Capacity.ccAC),
zandp(samples.A4, Capacity.nnAN),
zandp(samples.A4, Capacity.nnAC),
zandp(samples.A4, Capacity.ccAN)
),
B.PM.minus.Control=c(zandp(samples.A4, Capacity.ccBC),
zandp(samples.A4, Capacity.nnBN),
zandp(samples.A4, Capacity.nnBC),
zandp(samples.A4, Capacity.ccBN)
),
C.PM.minus.Control=c(zandp(samples.A4, Capacity.ccCC),
zandp(samples.A4, Capacity.nnCN),
zandp(samples.A4, Capacity.nnCC),
zandp(samples.A4, Capacity.ccCN)
),
D.PM.minus.Control=c(zandp(samples.A4, Capacity.ccDC),
zandp(samples.A4, Capacity.nnDN),
zandp(samples.A4, Capacity.nnDC),
zandp(samples.A4, Capacity.ccDN)
)
))
colnames(Capacity.Table) <- c("Conflict","Nonconflict","Conflict (FA)","Nonconflict (FA)")
# Capacity.Table
#
ProactiveTP.Table <- data.frame(rbind(
PM.Cost.A.minus.B=c(zandp(samples.A4, ProactiveTP.ABC),zandp(samples.A4, ProactiveTP.ABN)
),
PM.Cost.B.minus.C=c(zandp(samples.A4, ProactiveTP.BCC),zandp(samples.A4, ProactiveTP.BCN)
),
PM.Cost.C.minus.D=c(zandp(samples.A4, ProactiveTP.CDC),zandp(samples.A4, ProactiveTP.CDN)
)
))
colnames(ProactiveTP.Table) <- c("Conflict","Nonconflict")
# ProactiveTP.Table
#
Effort.by.TP.Table.Wide <- data.frame(rbind(
Conflict=c(zandp(samples.A4, Effort.TPccCABC),
zandp(samples.A4, Effort.TPccCBCC),
zandp(samples.A4, Effort.TPccCCDC),
zandp(samples.A4, Effort.TPccPMABC),
zandp(samples.A4, Effort.TPccPMBCC),
zandp(samples.A4, Effort.TPccPMCDC)
),
Nonconflict=c(zandp(samples.A4, Effort.TPnnCABN),
zandp(samples.A4, Effort.TPnnCBCN),
zandp(samples.A4, Effort.TPnnCCDN),
zandp(samples.A4, Effort.TPnnPMABN),
zandp(samples.A4, Effort.TPnnPMBCN),
zandp(samples.A4, Effort.TPnnPMCDN)
),
Conflict.FA=c(zandp(samples.A4, Effort.TPnnCABC),
zandp(samples.A4, Effort.TPnnCBCC),
zandp(samples.A4, Effort.TPnnCCDC),
zandp(samples.A4, Effort.TPnnPMABC),
zandp(samples.A4, Effort.TPnnPMBCC),
zandp(samples.A4, Effort.TPnnPMCDC)
),
Nonconflict.FA=c(zandp(samples.A4, Effort.TPccCABN),
zandp(samples.A4, Effort.TPccCBCN),
zandp(samples.A4, Effort.TPccCCDN),
zandp(samples.A4, Effort.TPccPMABN),
zandp(samples.A4, Effort.TPccPMBCN),
zandp(samples.A4, Effort.TPccPMCDN)
),
PM.to.PM=c("-","-","-",
zandp(samples.A4, Effort.TPppPMABP),
zandp(samples.A4, Effort.TPppPMBCP),
zandp(samples.A4, Effort.TPppPMCDP)
),
Conflict.to.PMC=c("-","-","-",
zandp(samples.A4, Effort.TPpcPMABC),
zandp(samples.A4, Effort.TPpcPMBCC),
zandp(samples.A4, Effort.TPpcPMCDC)
),
Nonconflict.to.PMN=c("-","-","-",
zandp(samples.A4, Effort.TPpnPMABN),
zandp(samples.A4, Effort.TPpnPMBCN),
zandp(samples.A4, Effort.TPpnPMCDN)
),
Conflict.to.PMN=c("-","-","-",
zandp(samples.A4, Effort.TPpnPMABC),
zandp(samples.A4, Effort.TPpnPMBCC),
zandp(samples.A4, Effort.TPpnPMCDC)
),
Nonconflict.to.PMC=c("-","-","-",
zandp(samples.A4, Effort.TPpcPMABN),
zandp(samples.A4, Effort.TPpcPMBCN),
zandp(samples.A4, Effort.TPpcPMCDN)
)
))
colnames(Effort.by.TP.Table.Wide) <- c("A-B (Control)","B-C (Control)","C-D (Control)","A-B (PM)","B-C (PM)","C-D (PM)")
# Effort.by.TP.Table.Wide
#
# Effort.by.TP.Table.Long <- data.frame(rbind(
#     Control.A.minus.B=c(zandp(samples.A4, Effort.TPccCABC),
#                         zandp(samples.A4, Effort.TPnnCABN),
#                         zandp(samples.A4, Effort.TPnnCABC),
#                         zandp(samples.A4, Effort.TPccCABN),
#                         "-","-","-","-","-"
#                         ),
#     Control.B.minus.C=c(zandp(samples.A4, Effort.TPccCBCC),
#                         zandp(samples.A4, Effort.TPnnCBCN),
#                         zandp(samples.A4, Effort.TPnnCBCC),
#                         zandp(samples.A4, Effort.TPccCBCN),
#                         "-","-","-","-","-"
#     ),
#     Control.C.minus.D=c(zandp(samples.A4, Effort.TPccCCDC),
#                         zandp(samples.A4, Effort.TPnnCCDN),
#                         zandp(samples.A4, Effort.TPnnCCDC),
#                         zandp(samples.A4, Effort.TPccCCDN),
#                         "-","-","-","-","-"
#     ),
#     PM.A.minus.B=c(zandp(samples.A4, Effort.TPccPMABC),
#                    zandp(samples.A4, Effort.TPnnPMABN),
#                    zandp(samples.A4, Effort.TPnnPMABC),
#                    zandp(samples.A4, Effort.TPccPMABN),
#
#                    zandp(samples.A4, Effort.TPppPMABP),
#
#                    zandp(samples.A4, Effort.TPpcPMABC),
#                    zandp(samples.A4, Effort.TPpnPMABN),
#                    zandp(samples.A4, Effort.TPpnPMABC),
#                    zandp(samples.A4, Effort.TPpcPMABN)
#
#     ),
#     PM.B.minus.C=c(zandp(samples.A4, Effort.TPccPMBCC),
#                    zandp(samples.A4, Effort.TPnnPMBCN),
#                    zandp(samples.A4, Effort.TPnnPMBCC),
#                    zandp(samples.A4, Effort.TPccPMBCN),
#
#                    zandp(samples.A4, Effort.TPppPMBCP),
#
#                    zandp(samples.A4, Effort.TPpcPMBCC),
#                    zandp(samples.A4, Effort.TPpnPMBCN),
#                    zandp(samples.A4, Effort.TPpnPMBCC),
#                    zandp(samples.A4, Effort.TPpcPMBCN)
#     ),
#     PM.C.minus.D=c(zandp(samples.A4, Effort.TPccPMCDC),
#                    zandp(samples.A4, Effort.TPnnPMCDN),
#                    zandp(samples.A4, Effort.TPnnPMCDC),
#                    zandp(samples.A4, Effort.TPccPMCDN),
#
#                    zandp(samples.A4, Effort.TPppPMCDP),
#
#                    zandp(samples.A4, Effort.TPpcPMCDC),
#                    zandp(samples.A4, Effort.TPpnPMCDN),
#                    zandp(samples.A4, Effort.TPpnPMCDC),
#                    zandp(samples.A4, Effort.TPpcPMCDN)
#     )
# ))
#
# colnames(Effort.by.TP.Table.Long) <- c("Conflict","Nonconflict","Conflict (FA)","Nonconflict (FA)","PM","Conflict to PMC","Nonconflict to PMC","Conflict to PMN","Nonconflict to PMN")
# Effort.by.TP.Table.Long
#
# Effort.by.TP.Table.PM <- data.frame(rbind(
#     PM.to.PM=c(zandp(samples.A4, Effort.TPppPMABP),
#                zandp(samples.A4, Effort.TPppPMBCP),
#                zandp(samples.A4, Effort.TPppPMCDP),
#                "-","-","-"
#     ),
#
#     Conflict.to.PM=c(zandp(samples.A4, Effort.TPpcPMABC),
#                      zandp(samples.A4, Effort.TPpcPMBCC),
#                      zandp(samples.A4, Effort.TPpcPMCDC),
#
#                      zandp(samples.A4, Effort.TPpcPMABN),
#                      zandp(samples.A4, Effort.TPpcPMBCN),
#                      zandp(samples.A4, Effort.TPpcPMCDN)
#     ),
#
#     Nonconflict.to.PM=c(zandp(samples.A4, Effort.TPpnPMABN),
#                         zandp(samples.A4, Effort.TPpnPMBCN),
#                         zandp(samples.A4, Effort.TPpnPMCDN),
#
#                         zandp(samples.A4, Effort.TPpnPMABC),
#                         zandp(samples.A4, Effort.TPpnPMBCC),
#                         zandp(samples.A4, Effort.TPpnPMCDC)
#
#     )
# ))
# colnames(Effort.by.TP.Table.PM) <- c("A-B (Correct)","B-C (Correct)","C-D (Correct)","A-B (FA)","B-C (FA)","C-D (FA)")
# Effort.by.TP.Table.PM
Reactive.Table
Proactive.Table
Capacity.Table
ProactiveTP.Table
Effort.by.TP.Table.Wide
# Effort.by.TP.Table.Long
# Effort.by.TP.Table.PM
#
rm(list=ls())
# setwd("~/russ_model_analyses")
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
source("dmc/dmc.R")
load_model ("LBA","lbaN_B.R")
source("LSAnova.R")
require(gridExtra)
require("lme4")
require(car)
require(plyr)
require(dplyr)
require("pander")
# load("~/Modelling/x1/samples/okdats.E1.RData")  # Original data
load("C:/Users/Russell Boag/Documents/GitHub/DMCATC/samples/E1.block.B.V_cond.B.V.PMV.samples.RData")  # Samples object
samples.E1 <- E1.block.B.V_cond.B.V.PMV.samples
rm(E1.block.B.V_cond.B.V.PMV.samples)
install.packages("heplots")
rm(list=ls())
# setwd("~/russ_model_analyses")
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC")
source("dmc/dmc.R")
load_model ("LBA","lbaN_B.R")
source("LSAnova.R")
require(gridExtra)
require("lme4")
require(car)
require(plyr)
require(dplyr)
require("pander")
# load("~/Modelling/x1/samples/okdats.E1.RData")  # Original data
load("C:/Users/Russell Boag/Documents/GitHub/DMCATC/samples/E1.block.B.V_cond.B.V.PMV.samples.RData")  # Samples object
samples.E1 <- E1.block.B.V_cond.B.V.PMV.samples
rm(E1.block.B.V_cond.B.V.PMV.samples)
# # # Get data from samples object # # #
#
get.hdata.dmc <- function(hsamples){
list.wind<-lapply(seq_along(hsamples), function(samples, n, i) cbind(n[[i]], samples[[i]]$data),
samples= hsamples, n = names(hsamples))
out<-do.call(rbind, list.wind)
names(out)[1] <- "s"
out
}
#
data.E1 <- get.hdata.dmc(samples.E1)  # Get data from samples object
head(data.E1)
# save(data.E1, file="data.E1.RData")
# all.equal(datE1[order(datE1$s),], data2)  # Check recovered data matches original data
head(data.E1)
#
data.E1$C <- rep(0,length(data.E1$RT))
for(i in 1:length(data.E1$RT)){
if(data.E1$S[i]=="cc" & data.E1$R[i]=="C"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="nn" & data.E1$R[i]=="N"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pc" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
} else if(data.E1$S[i]=="pn" & data.E1$R[i]=="P"){
data.E1$C[i] <- 1
}
}
#
setwd("C:/Users/Russell Boag/Documents/GitHub/DMCATC/analysis")
cdt <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]  # Conflict detection task only (no PM)
cdt$S <- factor(as.character(cdt$S)); cdt$R <- factor(as.character(cdt$R))
str(cdt)
pm <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]  # PM trials only
pm$S <- factor(as.character(pm$S)); pm$block <- factor(as.character(pm$block))
str(pm)
#
#
dPM.RT <- arr2df(tapply(pm$RT[pm$C==1],
list(s=pm$s[pm$C==1], block=pm$block[pm$C==1], cond=pm$cond[pm$C==1], S=pm$S[pm$C==1]),
mean))
dPM.RT
str(dPM.RT)
PMC.RT.lmer.E1 <- lmer(y ~ S*cond+(1|s), data=dPM.RT)
save(PMC.RT.lmer.E1, file="PMC.RT.lmer.E1.RData")
load("PMC.RT.lmer.E1.RData")
PM.RT.glm.E1 <- Anova(PMC.RT.lmer.E1,type="II")
PM.RT.glm.E1
dCDT.RT <- arr2df(tapply(cdt$RT[cdt$C==1],
list(s=cdt$s[cdt$C==1], block=cdt$block[cdt$C==1], cond=cdt$cond[cdt$C==1], S=cdt$S[cdt$C==1]),
mean))
str(dCDT.RT)
CDTC.RT.lmer.E1 <- lmer(y ~ S*block*cond+(1|s), data=dCDT.RT)
save(CDTC.RT.lmer.E1, file="CDTC.RT.lmer.E1.RData")
load("CDTC.RT.lmer.E1.RData")
CDT.RT.glm.E1 <- Anova(CDTC.RT.lmer.E1,type="II")
CDT.RT.glm.E1
RP.E1 <- ddply(data.E1, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))  # Get Response Proportions
head(RP.E1)
str(RP.E1)
save(RP.E1, file="RP.E1.RData")
mRP.E1 <- ddply(RP.E1, ~cond*block*S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))  # Means & SDs for Response Proportions
head(mRP.E1)
str(mRP.E1)
save(mRP.E1, file="mRP.E1.RData")
mRT.E1 <- ddply(data.E1, ~s*cond*block*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
head(mRT.E1)
save(mRT.E1, file="mRT.E1.RData")
head(RP.E1)
head(mRP.E1)
mRP.E1 <- ddply(RP.E1, ~cond*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))  # Means & SDs for Response Proportions
mRP.E1
mRP.E1 <- ddply(RP.E1, ~block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))  # Means & SDs for Response Proportions
mRP.E1
mRP.E1.TP <- ddply(RP.E1, ~cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
mRP.E1.TP
dPM.RT
head(mRT.E1)
dPM.RT
ddply(dPM.RT, ~block, summarise, M=mean(y, na.rm=TRUE))
ddply(dPM.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
ddply(dCDT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
mRT.E1 <- ddply(data.E1, ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[ data.E1$S!="pc"], ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1 <- ddply(data.E1[ data.E1$S!="pc", ], ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[ data.E1$S!="pc" & data.E1$S!="pn", ], ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
ddply(dCDT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE))
mRT.E1 <- ddply(data.E1[ data.E1$S=="cc" | data.E1$S=="nn", ], ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
ddply(dCDT.RT, ~cond*S, summarise, M=mean(y, na.rm=TRUE))
mRT.E1 <- ddply(data.E1[ data.E1$S=="cc" | data.E1$S=="nn", ], ~cond*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
ddply(dCDT.RT, ~cond*S, summarise, M=mean(y, na.rm=TRUE),SD=sd(RT, na.rm = TRUE))
ddply(dCDT.RT, ~cond*S, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
head(data.E1)
mRT.E1 <- ddply(data.E1[ (data.E1$S=="cc" & data.E1$C=="1") | (data.E1$S=="nn" & data.E1$C=="1"), ], ~cond*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[ (data.E1$S=="cc" & data.E1$C=="1") | (data.E1$S=="nn" & data.E1$C=="1"), ], ~cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
ddply(dCDT.RT, ~cond, summarise, M=mean(y, na.rm=TRUE),SD=sd(y, na.rm = TRUE))
mRT.E1 <- ddply(data.E1[ (data.E1$S=="cc" & data.E1$C=="1") | (data.E1$S=="nn" & data.E1$C=="1"), ], ~cond*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~cond*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~block*S, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~S*cond, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
mRT.E1 <- ddply(data.E1[data.E1$C=="1", ], ~S*block, summarise, M=mean(RT, na.rm = TRUE), SD=sd(RT, na.rm = TRUE))  # Mean RT for Correct Responses
mRT.E1
cdt <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]  # Conflict detection task only (no PM)
cdt$S <- factor(as.character(cdt$S)); cdt$R <- factor(as.character(cdt$R))
str(cdt)
cdt
ddply(cdt, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
ddply(cdt, ~block*S, summarise, RP=mean(C,na.rm=TRUE))
ddply(cdt, ~S*block, summarise, RP=mean(C,na.rm=TRUE))
ddply(cdt, ~S*cond, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT <- ddply(cdt, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT
ddply(RP.CDT, ~block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
ddply(RP.CDT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
ddply(RP.CDT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT <- ddply(cdt, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
pm <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]  # PM trials only
pm$S <- factor(as.character(pm$S)); pm$block <- factor(as.character(pm$block))
str(pm)
cdt <- data.E1[!(data.E1$S=="pc" | data.E1$S=="pn"),]  # Conflict detection task only (no PM)
cdt$S <- factor(as.character(cdt$S)); cdt$R <- factor(as.character(cdt$R))
str(cdt)
head(cdt)
pmt <- data.E1[(data.E1$S=="pc" | data.E1$S=="pn"),]  # pmt trials only
pmt$S <- factor(as.character(pmt$S)); pmt$block <- factor(as.character(pmt$block))
str(pmt)
head(pmt)
RP.CDT <- ddply(cdt, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.CDT.Block <- ddply(RP.CDT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.TP <- ddply(RP.CDT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT <- ddply(pmt, ~s*cond*block*S, summarise, RP=mean(C,na.rm=TRUE))
RP.PMT.Block <- ddply(RP.PMT, ~S*block, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT.TP <- ddply(RP.PMT, ~S*cond, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.Block
RP.CDT.TP
RP.PMT.Block
RP.PMT.TP
RP.PMT.S <- ddply(RP.PMT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.PMT.S
RP.CDT.S <- ddply(RP.CDT, ~S, summarise, M=mean(RP,na.rm=TRUE), SD=sd(RP,na.rm=TRUE))
RP.CDT.S
pm.glmer.E1 <- glmer(C ~ S*cond+(1|s), data=pm, family=binomial(link="probit"))
save(pm.glmer.E1, file="pm.glmer.E1.RData")
load("pm.glmer.E1.RData")
pm.glm.E1 <- Anova(pm.glmer.E1,type="II")
pm.glm.E1
RP.CDT.S
RP.CDT.Block
RP.CDT.S
RP.CDT.Block
ggplot(RP.CDT.Block, aes(block, M))
ggplot(RP.CDT.Block, aes(block, M))
ggplot(RP.CDT.Block, aes(block, M)) +
geom_point(stat = "identity")
ggplot(RP.CDT.Block, aes(block, M)) +
geom_point(stat = "identity", shape=S)
ggplot(RP.CDT.Block, aes(block, M), shape=S) +
geom_point(stat = "identity")
RP.CDT.Block
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity")
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=6)
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3)
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3) +
ylim(0.5,1)
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3) +
ylim(0.5,1) + ylab("Accuracy")
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3) +
ylim(0.5,1) + ylab("Accuracy") +
xlab("PM Block")
ggplot(RP.CDT.Block, aes(block, M, shape=S)) +
geom_point(stat = "identity",size=3) +
ylim(0.5,1) + ylab("Accuracy") +
xlab("PM Block") +
ggtitle("Accuracy by PM Block")
